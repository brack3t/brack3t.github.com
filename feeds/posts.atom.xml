<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>brack3t</title><link href="http://brack3t.com/" rel="alternate"></link><link href="http://brack3t.com/feeds/posts.atom.xml" rel="self"></link><id>http://brack3t.com/</id><updated>2012-12-03T15:01:16Z</updated><entry><title>Masonry, Infinite Scrolling, and Django</title><link href="http://brack3t.com/masonry-infinite-scrolling-and-django.html" rel="alternate"></link><updated>2012-12-03T15:01:16Z</updated><author><name>Kenneth</name></author><id>tag:brack3t.com,2012-12-03:masonry-infinite-scrolling-and-django.html</id><summary type="html">&lt;p&gt;For my current client, we needed a home page that would support a large number of products (it's an ecommerce startup) and, in our first iteration of the new design, deal with content blocks of various sizes. To me, this was a perfect use-case for the &lt;a class="reference external" href="http://masonry.desandro.com"&gt;Masonry&lt;/a&gt; jQuery plugin and infinite scrolling, in the vein of &lt;a class="reference external" href="http://pinterest.com"&gt;Pinterest&lt;/a&gt;. Turns out, this is remarkably easy with Django's &lt;a class="reference external" href="http://ccbv.co.uk/projects/Django/1.4/django.views.generic.list/ListView/"&gt;ListView&lt;/a&gt; and the &lt;a class="reference external" href="http://infinite-scroll.com"&gt;Infinite Scroll&lt;/a&gt; plugin from Paul Irish.&lt;/p&gt;
&lt;div class="section" id="the-django-side"&gt;
&lt;h2&gt;The Django Side&lt;/h2&gt;
&lt;p&gt;Setting up your view in Django is amazingly simple. We're using the &lt;a class="reference external" href="https://github.com/jamespacileo/django-pure-pagination"&gt;Pure Pagination&lt;/a&gt; pluggable app because we're using &lt;a class="reference external" href="http://getbootstrap.com"&gt;Bootstrap&lt;/a&gt; and want to show their style of pagination with page ranges left out if there are more than a given number of pages (e.g. Pages 1, 2, 3, ..., 9, 10, 11, ..., 17, 18, 19). For the sake of this example, I'll assume you have a template partial that contains your pagination markup. My common naming scheme for this is &lt;tt class="docutils literal"&gt;_pagination.html&lt;/tt&gt; in a &lt;tt class="docutils literal"&gt;_partials&lt;/tt&gt; directory in my site-wide &lt;tt class="docutils literal"&gt;templates&lt;/tt&gt; directory.&lt;/p&gt;
&lt;p&gt;So, for our example, we want to show 20 products from our &lt;tt class="docutils literal"&gt;Product&lt;/tt&gt; model (creative naming, I know). We set up our view like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;from django.views.generic import ListView&lt;/span&gt;

&lt;span class="x"&gt;from pure_pagination.mixins import PaginationMixin&lt;/span&gt;


&lt;span class="x"&gt;class ProductListView(PaginationMixin, ListView):&lt;/span&gt;
&lt;span class="x"&gt;    model = Product&lt;/span&gt;
&lt;span class="x"&gt;    paginate_by = 20&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We don't need to specify the template name or the queryset since we want to use the defaults. We add the view to our &lt;tt class="docutils literal"&gt;urls.py&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;from store.views import ProductListView&lt;/span&gt;

&lt;span class="x"&gt;urlpatterns = patterns(&amp;#39;&amp;#39;,&lt;/span&gt;
&lt;span class="x"&gt;    [...your other routes here...],&lt;/span&gt;
&lt;span class="x"&gt;    url(r&amp;quot;^products/$&amp;quot;, ProductListView.as_view(), name=&amp;quot;products&amp;quot;),&lt;/span&gt;
&lt;span class="x"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, finally, in our &lt;tt class="docutils literal"&gt;store/product_list.html&lt;/tt&gt; template, we render the items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;{% load humanize i18n %}
[...other HTML here..]
&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unstyled wall&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    {% for product in object_list %}
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;brick&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ product.get_absolute_url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;img&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ product.image.url }}&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;alt=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ product.name }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;
                    &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ product.get_absolute_url }}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                        {{ product.name }}&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;price&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    ${{ product.price|intcomma }}&lt;span class="nt"&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
                    {% if product.num_in_stock &amp;gt; 0 %}
                        {% trans &amp;quot;In Stock&amp;quot; %}
                    {% else %}
                        {% trans &amp;quot;Sold Out&amp;quot; %}
                    {% endif %}
                &lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;description muted&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    {{ product.description|capfirst|striptags }}
                &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
{% include &amp;quot;_pagination.html&amp;quot; %}
[...other HTML here..]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, nothing really special in the HTML. We simply print out the product image, name, price, availability, and description. We include the pagination HTML, too, as we need that for both the Infinite Scroll plugin and to be available for bots and users without Javascript enabled. The only thing left to do is to include the necessary Javascript libraries in your HTML template. I used the jQuery version of Masonry and also included the &lt;a class="reference external" href="https://github.com/desandro/imagesloaded"&gt;Images Loaded&lt;/a&gt; plugin to trigger Masonry only after images are loaded to make sure the layout is correct.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-javascript-side"&gt;
&lt;h2&gt;The Javascript Side&lt;/h2&gt;
&lt;p&gt;So with jQuery, Masonry, Image Loaded, and Infinite Scroll all included, it's time to build the small bit of functionality required make this all come together. In your product wall template, or site-wide if you're using this everywhere, either include the following bit of Javascript or stick it into an included file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$container&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.wall&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imagesLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;masonry&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="nx"&gt;itemSelector&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.brick&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;gutterWidth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;columnWidth&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;screenWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;documentElement&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getBoundingClientRect&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="mi"&gt;10&lt;/span&gt;
                &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;parseInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;screenWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;768&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nx"&gt;screenWidth&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;980&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;width&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;infinitescroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;navSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.pagination&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;nextSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.next&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;itemSelector&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.wall .brick&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nx"&gt;loading&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;finishedMsg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;img&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://pathtoyour.com/loading.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;msgText&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newProducts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;$newProds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;newProducts&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;css&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
            &lt;span class="nx"&gt;$newProds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;imagesLoaded&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;$newProds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;animate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;});&lt;/span&gt;
                &lt;span class="nx"&gt;$container&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;masonry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;appended&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;$newProds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first thing we do is cache our selector. We want the &lt;tt class="docutils literal"&gt;&amp;lt;ul&amp;gt;&lt;/tt&gt; with a class of &lt;tt class="docutils literal"&gt;wall&lt;/tt&gt;. Then, when the page is loaded, we add the &lt;tt class="docutils literal"&gt;.imagesLoaded&lt;/tt&gt; functionality to the wall. When it sees that all the images in that selector are loaded, it fires off Masonry on the container. I have anything with the class of &lt;tt class="docutils literal"&gt;brick&lt;/tt&gt; set as an item and a gutter width of 25 pixels. Then, to define how wide each column is, we do a bit of math on the size of the window. I'm using the same generic(-ish) numbers that Bootstrap uses to define a small/medium/large or phone/tablet/desktop version and how many columns I want in each. I either send back one column, two columns, or three.&lt;/p&gt;
&lt;p&gt;The last section loads the &lt;tt class="docutils literal"&gt;.infinitescroll&lt;/tt&gt; method onto my container. Within it, I specify that an element with the class of &lt;tt class="docutils literal"&gt;pagination&lt;/tt&gt; contains the...well, pagination. And that, within that element, the link that points to the next set of content always has the class name of &lt;tt class="docutils literal"&gt;next&lt;/tt&gt;. Finally, for &lt;tt class="docutils literal"&gt;itemSelector&lt;/tt&gt;, I specify that the content on the next page will be anything selected by &lt;tt class="docutils literal"&gt;.wall .brick&lt;/tt&gt;, which effectively grabs all of the products from the next page.&lt;/p&gt;
&lt;p&gt;In the loading section, most of what I'm doing is just cancelling out defaults. I specify an animated GIF to show during loading and set all the messages to blank. In my CSS, I actually hide the animated GIF because, due to how Masonry works, there's no good way to position it at the bottom of the list of elements.&lt;/p&gt;
&lt;p&gt;Finally, the function passed as a callback at the end handles what Infinite Scrolling does when it loads the next page of content. We set all of the new products to have 0% opacity, and, when all of their images have loaded, animate the opacity back to 100% and append the products into the existing Masonry layout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So all of this together, the ListView, the pagination mixin and partial, and the Javascripts, gives you infinite scrolling and a Masonry layout. Sure, it looks a decent amount like Pinterest, but I think that can actually work quite a bit in your favor. It's something people have gotten very used to and it makes sense. One thing we've noticed, though, is that, with very disparate brick heights, your newly-loaded bricks come in and appear out of order. They're still ordered correctly in the source, but may not visually line up. I'll leave that as an exercise for the implementer to make your bricks either equal-height or within a certain range to help prevent that display &amp;quot;bug&amp;quot;. Also, page refreshes send a vistor all the way back to the first page, so implementing some ability to automatically jump the user back to where they were in the stack would be a good exercise, too.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="javascript"></category></entry><entry><title>Getting Started with Django Kickstarter</title><link href="http://brack3t.com/getting-started-with-django-kickstarter.html" rel="alternate"></link><updated>2012-10-08T12:00:04Z</updated><author><name>Kenneth</name></author><id>tag:brack3t.com,2012-10-08:getting-started-with-django-kickstarter.html</id><summary type="html">&lt;p&gt;Recently we wrapped up a &lt;a class="reference external" href="http://www.kickstarter.com/projects/657368266/getting-started-with-django"&gt;Kickstarter&lt;/a&gt; for our &lt;a class="reference external" href="http://gettingstartedwithdjango.com"&gt;Getting Started with Django&lt;/a&gt; video series. I wanted to outline what we've done on the project, what we're going to do, and what it's like to run a Kickstarter.&lt;/p&gt;
&lt;div class="section" id="kickstarting"&gt;
&lt;h2&gt;Kickstarting&lt;/h2&gt;
&lt;p&gt;Starting a Kickstarter takes a lot longer than most people seem to think. I know it took longer than I thought it would. You have to fill out a lot of information about the project: a story, reward incentives, personal information about yourself, like where you're located and tax information. You also have to register and get authorized for an Amazon Payments account, which takes at least 3 days. Even if you had the video, story, and everything else gathered up and created, starting your Kickstarter is going to take around a week to get from sign-up to submission.&lt;/p&gt;
&lt;p&gt;Once it's submitted, the Kickstarter crew takes a look at it to make sure you're not doing something against their Terms of Service and that your project meets all the criteria for its submitted category. Since we were doing a technical project, for example, we were required to submit a video as part of our story.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="kickstarted"&gt;
&lt;h2&gt;Kickstarted&lt;/h2&gt;
&lt;p&gt;Once we got everything filled out, submitted, and finally approved, it was just a matter of waiting until the right time to actually launch the campaign. I sat on it for a couple of days, wanting it to run through DjangoCon 2012, but not wanting it to start at DjangoCon. I also had just had my second son, so I was waiting until things calmed down at home a bit, too.&lt;/p&gt;
&lt;p&gt;We launch on August 24th in the morning.&lt;/p&gt;
&lt;p&gt;Anyone who has sold software or ran a campaign like this will know what I'm talking about, but the anticipation of waiting for the first pledge to come in is hard to deal with. Thankfully, for us, our project was somewhat popular. We had over $2,400 in pledges in the first 24 hours.&lt;/p&gt;
&lt;p&gt;Also, after launching it, I was contacted by Jacob Kaplan-Moss about the Django Software Foundation helping to fund the project but with the caveat that there should be free versions of the videos. Anyone who watched the original series will remember that they were all free, and I was more than happy to have a free version. In fact, this got into my head and I decided that if the funds hit $7,500 (my original goal), I'd make them all free, instead of the $10 per video I was originally going to charge. Ironically, by the time the DSF got the funds approved and announced the funding at DjangoCon, we were already over the free video mark.&lt;/p&gt;
&lt;p&gt;Finally, the funding ended on September 23rd at a whopping &lt;strong&gt;$13,354&lt;/strong&gt;. Way, way more than either of us expected it to get to. I contribute this to a couple of things.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fundraising"&gt;
&lt;h2&gt;Fundraising&lt;/h2&gt;
&lt;p&gt;First off, I know that running a campaign during a very closely related conference was a big boost. The Kickstarter was mentioned a couple of different times in the main room of DjangoCon on the first day of the conference and that was one of our biggest donation days. The entire conference, really, was a great donation drive.&lt;/p&gt;
&lt;p&gt;Secondly, we did our best to keep it in the public eye. We tweeted about it, mentioned it in comments on blogs and Reddit, and brought it up in the #django IRC channel several times. While this might be a bit obnoxious, it's also the only way to make sure that people who might be interested will see it.&lt;/p&gt;
&lt;p&gt;The last thing that we did that really helped, in my opinion, is having smart stretch goals. The first round of contributions, up to $5,000, was just to get the series produced. By adding the first stretch, to $7,500, to make the videos free, gives an easy target for the people who are really invested in the community to drive us toward. Our second stretch goal, $10,000, for doing a second, smaller, series of videos about harder-but-still-common problems was attractive to people that already know the things I'm going to cover in the main series, but know that they still run into problems.&lt;/p&gt;
&lt;p&gt;Providing goals that aren't insanely far from your current amount and that enrich the project really helps. And the enrichment factor is a big part, too, as we saw with our last formal strech goal, at $12,000, for doing a round of stickers for everyone that donated $10 or more. While we did eventually reach that goal, it was not met with anywhere near the same enthusiasm as the previous two.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-we-are-now"&gt;
&lt;h2&gt;Where we are now&lt;/h2&gt;
&lt;p&gt;So, now that it's over and all the money is collected (minus the fees for Kickstarter and Amazon Payments), we're beginning the serious production work on the project.&lt;/p&gt;
&lt;p&gt;We got a new mic and boom arm to provide better audio recording than the original series. The &lt;a class="reference external" href="http://amzn.com/B000JM46FY"&gt;mic&lt;/a&gt; is a RØDE Podcaster with a RØDE boom arm and shockmount to go with it. I also picked up a Western Digital &lt;a class="reference external" href="http://amzn.com/B0041OSQB6"&gt;drive&lt;/a&gt; to use as backup and for file transfer when we work physically together on the project.&lt;/p&gt;
&lt;p&gt;And, to some people's disappointment, we ordered stickers from &lt;a class="reference external" href="http://stickermule.com"&gt;Sticker Mule&lt;/a&gt;, both with the Getting Started With Django logo and also the Django Pony. They should arrive this week or next and we'll start mailing them out after that. This'll be our first experience with doing a lot of mail distribution, especially to other countries, so if anyone has any advice, we'd love to hear it.&lt;/p&gt;
&lt;p&gt;As for the actual content of the project, we've planned out most of what the app we'll be building will do and started on outlining the first couple of episodes. Since this series is about more than just code, we have to take a lot of things into consideration for explaining, for example, how to go about solving your own problems in the Django community (IRC, mailing lists, asking questions intelligently, &lt;tt class="docutils literal"&gt;pdb&lt;/tt&gt; and the like, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="and-that-s-it-for-now"&gt;
&lt;h2&gt;And that's it for now&lt;/h2&gt;
&lt;p&gt;We'll do some more blog posts about individual chapters as we get them under our belts. We also have one brewing about the custom Vagrant base box we're setting up for the project and how you can do one for yourself.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="projects"></category><category term="django"></category><category term="teaching"></category></entry><entry><title>What We Use</title><link href="http://brack3t.com/what-we-use.html" rel="alternate"></link><updated>2012-06-26T18:15:15Z</updated><author><name>Kenneth</name></author><id>tag:brack3t.com,2012-06-26:what-we-use.html</id><summary type="html">&lt;p&gt;We've noticed several people publishing lists of what they use to do their work lately, so we thought we'd join in.
Below are the tools we use nearly every day to do our work. If you don't know, our work is the entire stack,
from setting up servers, to &lt;a class="reference external" href="http://djangoproject.com"&gt;Django&lt;/a&gt; and &lt;a class="reference external" href="http://python.org"&gt;Python&lt;/a&gt; programming, to front-end web development and design. Obviously,
with such a large area of work, we end up using a lot of different products and libraries, so, below is a list of our
most common items.&lt;/p&gt;
&lt;div class="contents topic" id="contents"&gt;
&lt;p class="topic-title first"&gt;Contents&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference internal" href="#vim" id="id5"&gt;VIM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#firefox" id="id6"&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#iterm-2" id="id7"&gt;iTerm 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#tmux" id="id8"&gt;Tmux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#homebrew" id="id9"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#skype" id="id10"&gt;Skype&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#screen-sharing" id="id11"&gt;Screen Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#balsamiq" id="id12"&gt;Balsamiq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#favorite-libraries-and-frameworks" id="id13"&gt;Favorite libraries and frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference internal" href="#summary" id="id14"&gt;Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="vim"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;VIM&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Do I really need to say anything about VIM? It's an amazing text editor and handles everything we need it to handle, from Django to HTML to &lt;a class="reference external" href="http://lesscss.org"&gt;LESS&lt;/a&gt; to Javascript and these blog posts (which are all done in &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;RestructuredText&lt;/a&gt; and published with &lt;a class="reference external" href="http://pelican.readthedocs.org/en/2.7.2/index.html"&gt;Pelican&lt;/a&gt;). Yes, it has a steep learning curve but that can be pretty easily mitigated by starting with a GUI version (like &lt;a class="reference external" href="http://www.vim.org/download.php#pc"&gt;gVim&lt;/a&gt; or &lt;a class="reference external" href="https://github.com/b4winckler/macvim"&gt;MacVim&lt;/a&gt;) and mapping controls to settings you're used to. Use nothing else for a week or two and you'll be back to your old speed, if not faster.&lt;/p&gt;
&lt;p&gt;There are a few plugins that we want to highlight, too.&lt;/p&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;p&gt;First up is &lt;a class="reference external" href="https://github.com/kien/ctrlp.vim"&gt;Ctrl-P&lt;/a&gt;. It's a fuzzy file finder that'll search your tree. One of the handiest features is the &lt;tt class="docutils literal"&gt;ctrlp_working_path_mode&lt;/tt&gt; setting when it's set to &lt;tt class="docutils literal"&gt;2&lt;/tt&gt;, which makes the search start at the nearest ancestor with a version control file/folder in it, such as the &lt;tt class="docutils literal"&gt;.git&lt;/tt&gt; folder. It will ignore files you tell it to ignore and can search based on most-recently-used or through ctags, which would let you find a file based on classes or methods it contains.&lt;/p&gt;
&lt;p&gt;Next is the complementary plugin, &lt;a class="reference external" href="https://github.com/scrooloose/nerdtree"&gt;NERDTree&lt;/a&gt;. We don't use it as much as we used to, now that we've switched to Ctrl-P, but it still gets a fair amount of usage. It's basically equivalent to TextMate or Sublime Text 2's project browser feature. Not much to explain here, but we do end up spending a fair amount of time in it.&lt;/p&gt;
&lt;p&gt;We also use &lt;a class="reference external" href="https://github.com/jeetsukumaran/vim-buffergator"&gt;Buffergator&lt;/a&gt; a lot since we tend to jump between a lot of files throughout the day. Buffergator lets you quickly see all of your buffer, sorted in a couple of different ways (MRU and buffer number are the two modes we use most) and will let you preview a buffer without switching to it, which is pretty handy when you find out that all of our apps contain two view files named &lt;tt class="docutils literal"&gt;backend.py&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;frontend.py&lt;/tt&gt; and two urls files named the same and, potentially, two files of APIs named the same too (we like naming schemes, OK?).&lt;/p&gt;
&lt;p&gt;For eye-candy, we also love the &lt;a class="reference external" href="https://github.com/Lokaltog/vim-powerline"&gt;Powerline&lt;/a&gt; plugin. It gives an awesome statusline effect and makes you feel cool, which is so rare for us nerdy types. Right, guys? Right?&lt;/p&gt;
&lt;p&gt;Since we write a lot of different languages, having syntax checking is really important. We use &lt;a class="reference external" href="https://github.com/scrooloose/syntastic"&gt;Syntastic&lt;/a&gt; to check all of our files for erros, and that requires us to have PyFlakes or PyLint installed system-wide, for checking Python. We also install Tidy (from Homebrew) for checking HTML and gjslist (Google's JSLint) or the standard JSLint installed for checking Javascript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="firefox"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Firefox&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know, I know, Chrome is the big browser on the block. And Safari is master of the mobile arena. But we both really like Firefox. Two main reasons, I think. One, &lt;a class="reference external" href="http://getfirebug.com/"&gt;Firebug&lt;/a&gt; is still the best inspector on the market, at least in my experience (and the Web Developer Toolbar's option to turn off cache isn't replicated in Safari at all). Secondly, &lt;a class="reference external" href="http://dactyl.sourceforge.net/pentadactyl/"&gt;Pentadactyl&lt;/a&gt; is unmatched in any other browser, bar none.&lt;/p&gt;
&lt;p&gt;That said, we both use Chrome and Safari for testing sites, holding on to multiple logins, and testing out Socket.IO and the like. We just use Firefox for standard browsing.&lt;/p&gt;
&lt;p&gt;Chris doesn't make use of it, but I definitely use the hell out of Firefox's tab groups, too. If you haven't tried out this feature, hit &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Cmd-Shift-E&lt;/span&gt;&lt;/tt&gt; (or likely &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;Ctrl-Shift-E&lt;/span&gt;&lt;/tt&gt; for you PC types) and check it out. Amazingly handy when you work on a lot of projects or need to keep several browsing trains of thought running at the same time. I really wish they had a way to unload a group of tabs from memory, though. That's all it's missing.&lt;/p&gt;
&lt;div class="section" id="addons"&gt;
&lt;h3&gt;Addons&lt;/h3&gt;
&lt;p&gt;As mentioned, we both use the hell out of Firebug. We also use Pentadactyl a lot. You all should know Firebug, so I'll talk about Pentadactyl for a bit. Since we're both big VIM users, Pentadactyl lets us use our keyboards for most of the browsing we do. We can open new tabs with &lt;tt class="docutils literal"&gt;t&lt;/tt&gt; or just go to a new URL in the current one with &lt;tt class="docutils literal"&gt;o&lt;/tt&gt;. We both set &lt;a class="reference external" href="http://duckduckgo.com"&gt;DuckDuckGo&lt;/a&gt; as our default search engines, too, so a quick &lt;tt class="docutils literal"&gt;t&lt;/tt&gt; followed by &lt;tt class="docutils literal"&gt;!django &amp;lt;search term here&amp;gt;&lt;/tt&gt; lets us quickly look up documentation.&lt;/p&gt;
&lt;p&gt;I mentioned the &lt;a class="reference external" href="https://addons.mozilla.org/en-US/firefox/addon/web-developer/"&gt;Web Developer Toolbar&lt;/a&gt; earlier too. We don't make extensive use of all of its features, but we do use the cache disable and browser resizing features. Before Firebug and some other addons were around, though, it was a killer addon to have for its ability to inspect CSS.&lt;/p&gt;
&lt;p&gt;The last addon that we made a lot of use of is &lt;a class="reference external" href="http://lackoftalent.org/michael/blog/json-in-firefox/"&gt;JSONovich&lt;/a&gt; which enables a pretty display of JSON in Firefox. If you end up having to look at a lot of JSON all day long (like, say, when you're working with Tastypie), it's really useful to have a nice view.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="iterm-2"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;iTerm 2&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The terminal that comes with Mac OS X Lion is great, but we both had some display weirdnesses when it was coupled with Tmux and our VIM setups. &lt;a class="reference external" href="http://www.iterm2.com/"&gt;iTerm&lt;/a&gt; didn't have any of those issues (but it did bring around a new one with the pastebin). It looks good, works well, and supports native splitting. The newest version introduced support for a custom version of Tmux, but neither of us have tried that out yet. If/when we do, we'll probably write something about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="tmux"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Tmux&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ah, &lt;a class="reference external" href="http://tmux.sourceforge.net/"&gt;Tmux&lt;/a&gt;. If you don't know what it is, you should. It's a terminal multiplexer with is a long way of saying it lets you split one terminal window into lots of terminal windows, both as whole new windows (groups of panes) and individual panes. We end up running several servers to do our work, so being able to see and control all the servers in one Tmux window is amazingly handy.&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="https://github.com/aziz/tmuxinator"&gt;Tmuxinator&lt;/a&gt;, too, to automate the creating of windows and panes for projects. You write a YAML file with rules for what windows and panes you want and what you want ran in each pane, then run &lt;tt class="docutils literal"&gt;tmuxinator start &amp;lt;project name&amp;gt;&lt;/tt&gt; and you're up and running.&lt;/p&gt;
&lt;p&gt;Also, when working on servers, Tmux makes it really easy to attach to an existing session and you can watch or work in tandem with another developer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="homebrew"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id9"&gt;Homebrew&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://mxcl.github.com/homebrew/"&gt;Homebrew&lt;/a&gt; is probably something we don't even need to mention. It's like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;apt-get&lt;/span&gt;&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;pacman&lt;/tt&gt; for your Mac, which means it'll let you install UNIX and Linux packages for your Mac through an easy command-line interface. You can even, with a bit of tinkering, install libraries that already come with your Mac, so if you need that bleeding-edge version of Ruby or Python, it's simple to install or uninstall.&lt;/p&gt;
&lt;p&gt;We've written a couple of Homebrew recipes for internal use at our main client and that has definitely helped with keeping the team using the same packages and versions, regardless of machine or technical aptitude.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="skype"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Skype&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I won't bother to link to Skype, I'm sure you already have it installed. We use it all day every day, though, since Chris and I pair program probably 98% of the day. Skype is how we conduct almost all of our client meetings and we talk through it all day ourselves. It's not a perfect system but it works really well and is less taxing on our machines than Google Hangouts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="screen-sharing"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Screen Sharing&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, the built-in Screen Sharing on your Mac (go find it in your Finder, it's at &lt;tt class="docutils literal"&gt;System &amp;gt; Library &amp;gt; CoreServices&lt;/tt&gt; and stick it in your Dock). This, combined with Skype, a VPN or DynDNS url, and a couple of opened ports and you have a quick and easy way to do pair programming remotely. Set it to start in Observe Mode and you don't have to worry about disturbing the person you're working with either.&lt;/p&gt;
&lt;div class="section" id="dyndns"&gt;
&lt;h3&gt;DynDNS&lt;/h3&gt;
&lt;p&gt;Chris and I each have a free domain name with &lt;a class="reference external" href="http://dyndns.org"&gt;DynDNS&lt;/a&gt; that we point to our machines through our routers and open up for web hosting (port 80) and screen sharing (the typical VNC ports). That way we can just point screen sharing to the URL and we're connected, no remembering IPs or having to look them up through the Network control panel or the terminal. Not a ground-breaking hint by any means but definitely one that has saved us time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="balsamiq"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Balsamiq&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We use &lt;a class="reference external" href="http://www.balsamiq.com/"&gt;Balsamiq&lt;/a&gt; for mocking up interfaces before we build them. Most of our work currently is replacing existing interfaces, used by a fair-sized team for years, with new, better, smarter ones. We plan out most of them before we start to build them and vet them with the people that will be using them. Balsamiq gives us a great, low-fidelity version we can show people that doesn't lead them to make too many assumptions about appearance or advanced functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="favorite-libraries-and-frameworks"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Favorite libraries and frameworks&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as favorite frameworks go, I'll give you three guesses which one is our favorite and the first two guesses don't count. We use Django for pretty much everything and haven't seen a reason to move away from it yet. But we don't live or work in a vacuum, so we've had to add a lot of other items to our repetoire.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nginx.org"&gt;Nginx&lt;/a&gt; is our web server of choice. It's fast, lightweight, and really easy to set up. We'll write up our crazy workflow with Nginx, Lua, Redis, and Scrapy soon.&lt;/p&gt;
&lt;p&gt;For DOM manipulation, we use jQuery. It's solid and dependable.&lt;/p&gt;
&lt;p&gt;For Javascript MVC, we use &lt;a class="reference external" href="http://backbonejs.org"&gt;BackboneJS&lt;/a&gt;. It may not be the newest or most fancy of the MVC frameworks, but we've come to understand it somewhat well, it works reliably with &lt;a class="reference external" href="http://tastypieapi.org"&gt;Tastypie&lt;/a&gt;, and uses the awesome Underscore.js library. Sadly, we haven't been able to make extensive use of Backbone yet, but we hope to change that in the near future.&lt;/p&gt;
&lt;p&gt;Last but not least, for design, we both definitely love the Twitter &lt;a class="reference external" href="http://twitter.github.com/bootstrap"&gt;Bootstrap&lt;/a&gt; collection. It's a great starting point for web design and really helps you get to creating the product instead of worrying about what it looks like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id14"&gt;Summary&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I think that pretty much covers the tools and libraries we end up touching in our day-to-day work. Our work and requirements are constantly changing, though, so this post might be one that we need to revist every six months or year. If you have any suggestions for new products to check out, or ways we can make our current favorites even better, let us know on Twitter or in the comments below. Thanks for reading.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="workflow"></category><category term="tools"></category></entry></feed>